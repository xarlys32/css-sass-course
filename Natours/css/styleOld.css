/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/
/* Selector universal cogera cada elemento de la pagina y le aplicara las siguientes declaraciones */
/* Obligaremos a todos los elementos a heredar el box sizing*/
/* meteremos los pseudo elementos after y before para que tambien hereden*/
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

/* Para usar rem es necesario un font-size en la raiz del documento, vease html*/
/* Es mala practica poner el root fontsize con pixel, pq deshabilitas la posibilidad de que el usuario aumente o disminuya el tamaño de la fuente*/
/* por defecto el valor de font size es 16px pero lo cambiamos a 10px que seria 10/16*100 = 62.5%*/
html {
  font-size: 62.5%;
}

/* Las fuentes son mejor usarlas en body, en vez de en el universal, para aprovechar el poder de herencia de los componentes */
/* Line height es el espacio entre lineas */
/* el padding no se hereda */
/* Box sizing altera el box model  del componente y con el border box hace que los margin y padding no añadan tamaño total*/
body {
  font-family: 'Lato', sans-serif;
  font-weight: 400;
  /*font-size: 16px;*/
  line-height: 1.7;
  color: #777;
  padding: 3rem;
  box-sizing: border-box;
}

/* porcentaje del viewport (95%) */
/* size cover lo que hace es que da igual el tamaño que sea de la imagen, ya que intentara ajustarse al elemento */
/* background-position asegura que encuanto hagamos responsive el top el bottom o el center permanezcan siempre en sus respectivas posiciones mientas el resto disminuye*/
/* Con los colores pasados a rgba podemos establecer la opacidad para visualuzar la imagen*/
/* polygon toma las coordenadas en direccion de las agujas del reloj (el primero es la esquina  arriba izquierda) */
.header {
  height: 95vh;
  background-image: linear-gradient(
      to right bottom,
      rgba(127, 214, 112, 0.8),
      rgba(41, 181, 134, 0.8)
    ),
    url(../img/hero.jpg);
  background-size: cover;
  background-position: top;
  position: relative;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
}

.header__logo-box {
  position: absolute;
  top: 4rem;
  left: 4rem;
}

.header__logo {
  height: 3.5rem;
}

/* transform translate se mueve en tamño del propio elemento, no del padre en el que este ubicado*/
/* el text align center afectara al href que tiene por debajo*/
.header__text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
}

/* backface-visibility evita que se produzcan algunos fallos visuales con las animaciones*/
.heading-primary {
  color: #fff;
  text-transform: uppercase;

  backface-visibility: hidden;
  margin-bottom: 6rem;
}

/* la mejor forma de separar el elementos pr linea es display block*/
/* animation-timing-function especifica la velocidad en los diferentes momentos de la animacion */
.heading-primary--main {
  display: block;
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;

  animation-name: moveInLeft;
  animation-duration: 3s;
  animation-timing-function: ease-in;
  /*
  animation-delay: 2s;
  animation-iteration-count: 2;
  */
}

.heading-primary--sub {
  display: block;
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.7rem;

  animation: moveInRight 3s ease-out;
}

/* para usar animaciones usaremos keyframes, los porcentajes iniciales indican el inicio y fin*/
/* Lo llamaremos con animation-name y le tenemos que especificar tambien la duracion*/
@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem);
  }

  80% {
    transform: translateX(1rem);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }

  80% {
    transform: translateX(-1rem);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

/* :link es una pseudoclase que es un estado del selector (asi diseñamos clases bajo estados especiales, hover, click..) */
/* usaremos display inline-block siempre que aparte de usar el salto de linea queramos añador padding o width automatico */
/* transition es el otro metodo que se usa para las animaciones */
.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  display: inline-block;
  border-radius: 10rem;
  transition: all 0.2s;
  position: relative;
  font-size: 1.6rem;
}

/* En css el eje ascendente se mueve de arriba abajo por lo que para subir el boton tenemos que usar valor negativo */
.btn:hover {
  transform: translateY(-0.3rem);
  box-shadow: 0 1rem 2rem rgb(0, 0, 0, 0.2);
}

.btn:active {
  transform: translateY(-0.1rem);
  box-shadow: 0 0.5rem 1rem rgb(0, 0, 0, 0.2);
}

.btn--white {
  background-color: #fff;
  color: #777;
}

/* :: es un pseudo elemento que sirve para seleccionar parte de un elemento */
/* en el caso de ::after se enfatiza en la parte final de un elemnto y añadir contenido.Se debe especificar content y display o de lo contrario no se mostrara*/
/* Hacemos que este elemento de boton tenga el mismo tamaño que el original y se posiciones atras*/
.btn::after {
  content: '';
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 10rem;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s;
}

.btn--white::after {
  background-color: #fff;
}

/* el elemente btn::after indicamos que aumentara de tamaño al hacer hover*/
.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(5rem);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

/* no metera los estilos del elemento original(hacerlo visible) hasta que la animacion empiece tras el delay de 0.75*/
.btn--animated {
  animation: moveInBottom 0.5s ease-in 0.75s;
  animation-fill-mode: backwards;
}
